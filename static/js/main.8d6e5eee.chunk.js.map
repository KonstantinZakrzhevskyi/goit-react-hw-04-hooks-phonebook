{"version":3,"sources":["components/Section/Section.module.css","components/ContactForm/ContactForm.module.css","components/Section/Section.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","Section","title","children","className","s","section","section__title","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","value","reset","form","preventDefault","form__label","form__input","type","pattern","required","onChange","form__btn","disabled","Filter","filter__label","filter__text","filter__input","ContactList","contacts","onDeleteContact","contact__list","map","id","contact__item","contact__text","contact__btn","onClick","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","console","log","setItem","stringify","contact","shortid","generate","includes","alert","state","normalizedFilter","toLowerCase","visibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d6e5eee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2oGf0\",\"section__title\":\"Section_section__title__n7bnJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1CAyo\",\"form__label\":\"ContactForm_form__label__7LboQ\",\"form__input\":\"ContactForm_form__input__2V4TL\",\"form__btn\":\"ContactForm_form__btn__2KojJ\"};","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={s.section}>\r\n      {title && <h2 className={s.section__title}>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit({ name, number });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.form__label}>\r\n        Name\r\n        <input\r\n          className={s.form__input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      .\r\n      <label className={s.form__label}>\r\n        Number\r\n        <input\r\n          className={s.form__input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleInputChange}\r\n        />\r\n      </label>\r\n      <button className={s.form__btn} type=\"submit\" disabled={!name}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={s.filter__label}>\r\n    <p className={s.filter__text}>Find contacts by name</p>\r\n    <input\r\n      className={s.filter__input}\r\n      type=\"text\"\r\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n      required\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <ul className={s.contact__list}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className={s.contact__item} key={id}>\r\n        <p className={s.contact__text}>{name}:</p>\r\n        <p className={s.contact__text}>{number}</p>\r\n        <button\r\n          className={s.contact__btn}\r\n          type=\"button\"\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nimport './App.css';\n\nfunction App() {\n  const [contacts, setContacts] = useState(\n    () => JSON.parse(window.localStorage.getItem('contacts')) ?? [],\n  );\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    console.log('запускается useEffect');\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    contacts.map(contact => contact.name).includes(name)\n      ? alert(`${name} is already in contacts.`)\n      : setContacts(state => [contact, ...state]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm onSubmit={addContact} />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactList\n          contacts={visibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n\n// =====  example class ====\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ cintacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const { contacts } = this.state;\n\n//     const contact = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     contacts.map(contact => contact.name).includes(name)\n//       ? alert(`${name} is already in contacts.`)\n//       : this.setState(prevState => ({\n//           contacts: [contact, ...prevState.contacts],\n//         }));\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   changeFilter = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <>\n//         <Section title=\"Phonebook\">\n//           <ContactForm onSubmit={this.addContact} />\n//         </Section>\n//         <Section title=\"Contacts\">\n//           <Filter value={filter} onChange={this.changeFilter} />\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.deleteContact}\n//           />\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__list\":\"ContactList_contact__list__3ll1P\",\"contact__item\":\"ContactList_contact__item__1bBAk\",\"contact__text\":\"ContactList_contact__text__vF_gQ\",\"contact__btn\":\"ContactList_contact__btn__cykas\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__text\":\"Filter_filter__text__3K2oY\",\"filter__input\":\"Filter_filter__input__1druH\"};"],"sourceRoot":""}